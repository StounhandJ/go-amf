package amf

import (
	"testing"
	"time"
)

var encodeCases0 = []encodeTestCase {
	{3.14, []byte{0x0, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f}},
	{1, []byte{0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{-1, []byte{0x00, 0xbf, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{true, []byte{0x01, 0x01}},
	{false, []byte{0x01, 0x00}},
	{"foo", []byte{0x02, 0x00, 0x03, 0x66, 0x6f, 0x6f}},
	{"", []byte{0x02, 0x00, 0x00}},
	{nil, []byte{0x05}},
	{map[string]interface{}{
		"1": 1,
		"2": 3.14,
		"3": "three",
		"4": nil,
		"5": true}, []byte{0x03,
		0x00, 0x01, 0x31, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x01, 0x32, 0x00, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f,
		0x00, 0x01, 0x33, 0x02, 0x00, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65,
		0x00, 0x01, 0x34, 0x05,
		0x00, 0x01, 0x35, 0x01, 0x01,
		0x00, 0x00, 0x09}},
	{ECMAArray(map[string]interface{}{
		"1": 1,
		"2": 3.14,
		"3": "three",
		"4": nil,
		"5": true}), []byte{0x08,
		0x00, 0x00, 0x00, 0x05,
		0x00, 0x01, 0x31, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x01, 0x32, 0x00, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f,
		0x00, 0x01, 0x33, 0x02, 0x00, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65,
		0x00, 0x01, 0x34, 0x05,
		0x00, 0x01, 0x35, 0x01, 0x01}},
	{time.Unix(123456789, 123456789), []byte{0x0b, 0x42, 0x3c, 0xbe, 0x99, 0x1a, 0x83, 0x00, 0x00, 0x00, 0x00}},
	{[]interface{}{"one", "two", "three"}, []byte{0x0a,
		0x00, 0x00, 0x00, 0x03,
		0x02, 0x00, 0x03, 0x6f, 0x6e, 0x65,
		0x02, 0x00, 0x03, 0x74, 0x77, 0x6f,
		0x02, 0x00, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65}},
	{[]interface{}{1, 2, 1}, []byte{0x0a,
		0x00, 0x00, 0x00, 0x03,
		0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{[]interface{}{true, false, true}, []byte{0x0a,
		0x00, 0x00, 0x00, 0x03,
		0x01, 0x01,
		0x01, 0x00,
		0x01, 0x01}},
}

func TestEncodeAMF0(t *testing.T) {
	testEncode(t, encodeCases0, EncodeAMF0, "TestEncodeAMF0")
}

var decodeCases0 = []decodeTestCase {
	{[]byte{0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 9, 1.0},
	{[]byte{0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 9, float64(1)},
	{[]byte{0x00, 0xbf, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 9, float64(-1)},
	{[]byte{0x01, 0x01}, 2, true},
	{[]byte{0x01, 0x00}, 2, false},
	{[]byte{0x02, 0x00, 0x03, 0x66, 0x6f, 0x6f}, 6, "foo"},
	{[]byte{0x02, 0x00, 0x00}, 3, ""},
	{[]byte{0x05}, 1, nil},
	{[]byte{0x03,
		0x00, 0x01, 0x31, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x01, 0x32, 0x00, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f,
		0x00, 0x01, 0x33, 0x02, 0x00, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65,
		0x00, 0x01, 0x34, 0x05,
		0x00, 0x01, 0x35, 0x01, 0x01,
		0x00, 0x00, 0x09}, 48, map[string]interface{}{
		"1": 1.0, // AMF0 only has Number
		"2": 3.14,
		"3": "three",
		"4": nil,
		"5": true}},
	{[]byte{0x08, 0x00, 0x00, 0x00, 0x05,
		0x00, 0x01, 0x31, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x01, 0x32, 0x00, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f,
		0x00, 0x01, 0x33, 0x02, 0x00, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65,
		0x00, 0x01, 0x34, 0x05,
		0x00, 0x01, 0x35, 0x01, 0x01}, 49, ECMAArray(map[string]interface{}{
		"1": 1.0, // AMF0 only has Number
		"2": 3.14,
		"3": "three",
		"4": nil,
		"5": true})},
	{[]byte{0x0b, 0x42, 0x3c, 0xbe, 0x99, 0x1a, 0x83, 0x00, 0x00, 0x00, 0x00}, 11, time.Unix(123456789, 123000000)},
	{[]byte{0x0a,
		0x00, 0x00, 0x00, 0x03,
		0x02, 0x00, 0x03, 0x6f, 0x6e, 0x65,
		0x02, 0x00, 0x03, 0x74, 0x77, 0x6f,
		0x02, 0x00, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65}, 25, []interface{}{"one", "two", "three"}},
	{[]byte{0x0a,
		0x00, 0x00, 0x00, 0x03,
		0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 32, []interface{}{float64(1), float64(2), float64(1)}},
	{[]byte{0x0a,
		0x00, 0x00, 0x00, 0x03,
		0x01, 0x01,
		0x01, 0x00,
		0x01, 0x01}, 11, []interface{}{true, false, true}},
}

func TestDecodeAMF0(t *testing.T) {
	testDecode(t, decodeCases0, decodeAMF0, "TestDecodeAMF0")
}
