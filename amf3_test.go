package amf

import (
	"bytes"
	"reflect"
	"testing"
	"time"
)

func TestEncodeAMF3(t *testing.T) {
	cases := []struct {
		in   interface{}
		want []byte
	}{
		{3.14, []byte{0x05, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f}},
		{1, []byte{0x04, 0x01}},
		{-1, []byte{0x04, 0xff, 0xff, 0xff, 0xff}},
		{amf3MinInt, []byte{0x04, 0xc0, 0x80, 0x80, 0x00}},
		{amf3MinInt - 1, []byte{0x5, 0xc1, 0xb0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}},
		{amf3MaxInt, []byte{0x04, 0xbf, 0xff, 0xff, 0xff}},
		{amf3MaxInt + 1, []byte{0x5, 0x41, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{true, []byte{0x03}},
		{false, []byte{0x02}},
		{"foo", []byte{0x06, 0x07, 0x66, 0x6f, 0x6f}},
		{"", []byte{0x06, 0x01}},
		{nil, []byte{0x01}},
		// {map[string]interface{}{
		// 	"1": 1,
		// 	"2": 3.14,
		// 	"3": "three",
		// 	"4": nil,
		// 	"5": true}, []byte{0x03,
		// 	0x00, 0x01, 0x31, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// 	0x00, 0x01, 0x32, 0x00, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f,
		// 	0x00, 0x01, 0x33, 0x02, 0x00, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65,
		// 	0x00, 0x01, 0x34, 0x05,
		// 	0x00, 0x01, 0x35, 0x01, 0x01,
		// 	0x00, 0x00, 0x09}},
		{ECMAArray(map[string]interface{}{
			"1": 1,
			"2": 3.14,
			"3": "three",
			"4": nil,
			"5": true}), []byte{0x09, 0x01,
			0x3, 0x31, /*:*/ 0x4, 0x1,
			0x3, 0x32, /*:*/ 0x5, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f,
			0x3, 0x33, /*:*/ 0x6, 0xb, 0x74, 0x68, 0x72, 0x65, 0x65,
			0x3, 0x34, /*:*/ 0x1,
			0x3, 0x35, /*:*/ 0x3,
			0x1}},
		{time.Unix(123456789, 123456789), []byte{0x08, 0x01, 0x42, 0x3c, 0xbe, 0x99, 0x1a, 0x83, 0x00, 0x00}},
		{[]interface{}{"one", "two", "three"}, []byte{0x09,
			0x07, 0x01,
			0x06, 0x07, 0x6f, 0x6e, 0x65,
			0x06, 0x07, 0x74, 0x77, 0x6f,
			0x06, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x65}},
		{[]interface{}{1, 2, 1}, []byte{0x09,
			0x07, 0x01,
			0x04, 0x01,
			0x04, 0x02,
			0x04, 0x01}},
		{[]interface{}{true, false, true}, []byte{0x09,
			0x07, 0x01,
			0x03,
			0x02,
			0x03}},
	}
	for _, c := range cases {
		got := EncodeAMF3(c.in)
		if bytes.Compare(got, c.want) != 0 {
			t.Errorf("EncodeAMF3(%#v) == %#v (%d), want %#v (%d)", c.in, got, len(got), c.want, len(c.want))
		}
	}
}

func TestDecodeAMF3(t *testing.T) {
	cases := []struct {
		in   []byte
		blen int
		want interface{}
	}{
		{[]byte{0x05, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f}, 9, 3.14},
		{[]byte{0x04, 0x01}, 2, int(1)},
		{[]byte{0x04, 0xff, 0xff, 0xff, 0xff}, 5, int(-1)},
		{[]byte{0x04, 0xc0, 0x80, 0x80, 0x00}, 5, int(amf3MinInt)},
		{[]byte{0x5, 0xc1, 0xb0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00}, 9, float64(amf3MinInt - 1)},
		{[]byte{0x04, 0xbf, 0xff, 0xff, 0xff}, 5, int(amf3MaxInt)},
		{[]byte{0x5, 0x41, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 9, float64(amf3MaxInt + 1)},
		{[]byte{0x03}, 1, true},
		{[]byte{0x02}, 1, false},
		{[]byte{0x06, 0x07, 0x66, 0x6f, 0x6f}, 5, "foo"},
		{[]byte{0x06, 0x01}, 2, ""},
		{[]byte{0x00}, 1, nil},
		{[]byte{0x01}, 1, nil},
		// {[]byte{0x03,
		// 	0x00, 0x01, 0x31, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		// 	0x00, 0x01, 0x32, 0x00, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f,
		// 	0x00, 0x01, 0x33, 0x02, 0x00, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65,
		// 	0x00, 0x01, 0x34, 0x05,
		// 	0x00, 0x01, 0x35, 0x01, 0x01,
		// 	0x00, 0x00, 0x09}, 48, map[string]interface{}{
		// 	"1": 1.0, // AMF0 only has Number
		// 	"2": 3.14,
		// 	"3": "three",
		// 	"4": nil,
		// 	"5": true}},
		{[]byte{0x09, 0x01,
			0x3, 0x31, /*:*/ 0x4, 0x1,
			0x3, 0x32, /*:*/ 0x5, 0x40, 0x9, 0x1e, 0xb8, 0x51, 0xeb, 0x85, 0x1f,
			0x3, 0x33, /*:*/ 0x6, 0xb, 0x74, 0x68, 0x72, 0x65, 0x65,
			0x3, 0x34, /*:*/ 0x1,
			0x3, 0x35, /*:*/ 0x3,
			0x1}, 33, ECMAArray(map[string]interface{}{
			"1": 1,
			"2": 3.14,
			"3": "three",
			"4": nil,
			"5": true})},
		{[]byte{0x08, 0x01, 0x42, 0x3c, 0xbe, 0x99, 0x1a, 0x83, 0x00, 0x00}, 10, time.Unix(123456789, 123000000)},
		{[]byte{0x09,
			0x07, 0x01,
			0x06, 0x07, 0x6f, 0x6e, 0x65,
			0x06, 0x07, 0x74, 0x77, 0x6f,
			0x06, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x65}, 20, []interface{}{"one", "two", "three"}},
		{[]byte{0x09,
			0x07, 0x01,
			0x04, 0x01,
			0x04, 0x02,
			0x04, 0x01}, 9, []interface{}{1, 2, 1}},
		{[]byte{0x09,
			0x07, 0x01,
			0x03,
			0x02,
			0x03}, 6, []interface{}{true, false, true}},
	}
	for _, c := range cases {
		got, blen, err := decodeAMF3(c.in)
		if err != nil {
			t.Errorf("DecodeAMF3(%#v): %s", c.in, err)
			continue
		}
		if blen != c.blen || blen != len(c.in) {
			t.Errorf("DecodeAMF3(%#v) actual %d returned %d wanted %d", c.in, len(c.in), blen, c.blen)
			continue
		}
		switch got.(type) {
		case []interface{}, map[string]interface{}, ECMAArray:
			if !reflect.DeepEqual(c.want, got) {
				t.Errorf("DecodeAMF3(%#v) == %#v, want %#v", c.in, got, c.want)
			}
			continue
		}
		if got != c.want {
			t.Errorf("DecodeAMF3(%#v) == %#v, want %#v", c.in, got, c.want)
		}
	}
}
