package amf

import (
	"bytes"
	"testing"
)

func TestEncodeAMF0(t *testing.T) {
	cases := []struct {
		in   interface{}
		want []byte
	}{
		{1.0, []byte{0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{1, []byte{0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{-1, []byte{0x00, 0xbf, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{true, []byte{0x01, 0x01}},
		{false, []byte{0x01, 0x00}},
		{"foo", []byte{0x02, 0x00, 0x03, 0x66, 0x6f, 0x6f}},
		{"", []byte{0x02, 0x00, 0x00}},
		{nil, []byte{0x05}},
		{Amf0Reference(5), []byte{0x07, 0x00, 0x05}},
		/*{map[string]interface{}{"1": 1,
		  "2": 1.797693134862315708145274237317043567981e+308,
		  "3": "three",
		  "4": nil,
		  "5": true}, []byte{0x03, 0x02, 0x00, 0x01, 0x34, 0x05, 0x02, 0x00,
		                      0x01, 0x35, 0x01, 0x01, 0x02, 0x00, 0x01, 0x31,
		                      0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
		                      0x00, 0x02, 0x00, 0x01, 0x32, 0x00, 0x7f, 0xef,
		                      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00,
		                      0x01, 0x33, 0x02, 0x00, 0x05, 0x74, 0x68, 0x72,
		                      0x65, 0x65, 0x00, 0x00, 0x09}},*/
		{Amf0Date(353464561), []byte{0x0b, 0x41, 0xb5, 0x11, 0x70, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{[]interface{}{"one", "two", "three"}, []byte{0x0a, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
			0x00, 0x02, 0x00, 0x03, 0x6f, 0x6e, 0x65, 0x02, 0x00, 0x03, 0x74, 0x77, 0x6f, 0x02, 0x00,
			0x05, 0x74, 0x68, 0x72, 0x65, 0x65}},
		{[]interface{}{1, 2, 1}, []byte{0x0a, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
		{[]interface{}{true, false, true}, []byte{0x0a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x01, 0x01, 0x00, 0x01, 0x01}},
		{Amf0Xml("one two three"), []byte{0x0f, 0x00, 0x00, 0x00, 0x0d, 0x6f, 0x6e, 0x65, 0x20, 0x74,
			0x77, 0x6f, 0x20, 0x74, 0x68, 0x72, 0x65, 0x65}},
	}
	for _, c := range cases {
		got := EncodeAMF0(c.in)
		if bytes.Compare(got, c.want) != 0 {
			t.Errorf("EncodeAMF0(%q) == %q, want %q", c.in, got, c.want)
		}
	}
}
